generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  uuid              String   @unique @default(uuid())
  email             String   @unique
  password          String
  role              String   @default("USER")
  team1Notification Boolean  @default(true)
  team2Notification Boolean  @default(true)
  team3Notification Boolean  @default(true)
  team4Notification Boolean  @default(true)
  team5Notification Boolean  @default(true)
  team6Notification Boolean  @default(true)
  team7Notification Boolean  @default(true)
  team8Notification Boolean  @default(true)
  team9Notification Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Team {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  geniusTeamId   String?          @unique
  depthChart     DepthChart[]
  DepthChartList DepthChartList[]
  Drives         Drive[]
  Plays          Play[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model DepthChartList {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  teamId    Int
  value     String?
  year      Int
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepthChart {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  teamId    Int
  title     String
  value     String
  year      Int
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  response  String
  year      Int      @default(2024)
  Drives    Drive[]
  Plays     Play[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Drive {
  id               Int      @id @default(autoincrement())
  uuid             String   @unique @default(uuid())
  gameId           Int
  geniusTeamId     String
  number           Int
  isScoring        Boolean  @default(false)
  points           Int?
  nextPointOutcome Int?
  Plays            Play[]
  Team             Team     @relation(fields: [geniusTeamId], references: [geniusTeamId], onDelete: Cascade)
  Game             Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Play {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique @default(uuid())
  gameId         Int
  geniusTeamId   String
  driveId        Int
  number         Int
  type           String
  subtype        String?
  description    String
  clock          String
  timestamp      BigInt
  phase          String
  phaseQualifier String
  isScoring      Boolean
  startPosition  String
  endPosition    String?
  down           Int?
  distance       String?
  yardLine       Int?
  kicker         String?
  passer         String?
  rusher         String?
  receiver       String?
  defense        String?
  yardsGained    Int?
  puntYards      Int?
  returnYards    Int?
  epa            Float?
  Drive          Drive    @relation(fields: [driveId], references: [id], onDelete: Cascade)
  Team           Team     @relation(fields: [geniusTeamId], references: [geniusTeamId], onDelete: Cascade)
  Game           Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
